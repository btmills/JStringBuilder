// Generated by CoffeeScript 1.4.0

(function(exports) {
  return exports.StringBuilder = (function() {

    _Class.chars = [];

    /* Constructor
    */


    function _Class(str) {
      if (str instanceof Array) {
        this.chars = str;
      } else if (typeof str === 'string') {
        this.chars = str.split('');
      } else {
        this.chars = [];
      }
    }

    /* Internal
    */


    _Class.prototype.asCharArray = function(src) {
      if (typeof src === 'string') {
        return src.split('');
      } else if (typeof src === 'number') {
        return src.toString().split('');
      } else if (src.constructor === this) {
        return src.chars;
      } else if (src instanceof Array) {
        return src;
      } else {
        return src.toString().split('');
      }
    };

    /* StringBuilder methods
    */


    _Class.prototype.append = function(str) {
      return this.chars = this.chars.concat(this.asCharArray(str));
    };

    _Class.prototype.at = function(index) {
      if ((0 <= index && index < this.chars.length)) {
        return this.chars[index];
      } else if ((-this.chars.length <= index && index <= -1)) {
        return this.chars[this.chars.length + index];
      } else {
        return '';
      }
    };

    _Class.prototype.insert = function(index, str) {
      str = this.asCharArray(str);
      return this.chars = this.chars.slice(0, index).concat(str.concat(this.chars.slice(index, this.chars.length)));
    };

    _Class.prototype.length = function() {
      return this.chars.length;
    };

    _Class.prototype.remove = function(start, end) {
      if (!end && (-this.chars.length <= start && start < this.chars.length)) {
        return this.chars.splice(start, 1);
      } else if ((0 <= start && start < end)) {
        return this.chars.splice(start, end - start);
      }
    };

    _Class.prototype.reverse = function() {
      return this.chars = this.chars.reverse();
    };

    _Class.prototype.substring = function(start, end) {
      if (!end) {
        end = this.chars.length;
      }
      if ((0 <= start && start < end)) {
        return this.chars.slice(start, end).join('');
      } else {
        return '';
      }
    };

    _Class.prototype.toString = function() {
      return this.chars.join('');
    };

    return _Class;

  })();
})(typeof exports === 'undefined' ? this['StringBuilder'] = {} : exports);
